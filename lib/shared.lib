# 18.10.2021 Aychin Added is_local_host function, which will be used in pgoperated and standbymgr.sh

SET_CONF_PARAM_IN_CLUSTER=YES
_IS_ROOT="$(id -u)"

OS_USER=$(id -un)
OS_GROUP=$(id -gn)

prepare_logdir() {
  mkdir -p $PGSQL_BASE/log/tools
  local rdays
  [[ -z $TOOLS_LOG_RETENTION_DAYS ]] && rdays=30 || rdays=$TOOLS_LOG_RETENTION_DAYS
  find $PGSQL_BASE/log/tools -mtime +$rdays -exec rm -f {} \;
}


# This function will be used to check if current host is master or not. Used in pgoperated and standbymgr.sh.
# It will accept hostname or IP address and will check all local interfaces if they match to it.
# Function will output YES and status 0 if match
is_local_host() {
    local input=$1
    
    matchlifs() {
      # Get local interfaces. Spaces before and after the list required for exact comparision.
      local ifs=" $(hostname -I) "
      if [[ "$ifs" =~ " $1 " ]]; then
        return 0
      else
        return 1
      fi
    }

    # Check if the input is IP or hostname
    if [[ $input =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
      # It is IP address
      # Then check if the IP is in the list of local interfaces
      matchlifs $input
      if [[ $? -eq 0 ]]; then
        echo "YES" && return 0
      else
        echo "NO" && return 1
      fi
      

    else
      # It is hostname
      # Check /etc/hosts first
      local hosts_ip=$(awk "/(\t| )$input/" </etc/hosts | awk '{ print $1 }')
      if [[ ! -z $hosts_ip ]]; then
        # If IP matches local interfaces, then we done
        matchlifs $hosts_ip
          if [[ $? -eq 0 ]]; then
            echo "YES" && return 0
          else
            echo "NO" && return 1
          fi

      else
        # There was no entry in /etc/hosts, check the DNS
        local dns_ip=$(dig +time=2 +tries=2 +short -4 -r $input)

           if [[ ! -z $dns_ip ]]; then
             # If IP matches local interfaces, then we done
             matchlifs $dns_ip
             if [[ $? -eq 0 ]]; then
               echo "YES" && return 0
             else
               echo "NO" && return 1
             fi
             
           else
             echo "NO" && return 1
           fi
      fi

    fi
}


modifyFile() {
  local v_file=$1
  local v_op=$2
  local value="$3"
  local replace="$4"
  replace="${replace//\"/\\x22}"
  replace="${replace//$'\t'/\\t}"
  replace="${replace//\*/\\*}"
  value="${value//\"/\\x22}"
  value="${value//$'\t'/\\t}"
  local v_bkp_file=$v_file"."$(date +"%y%m%d%H%M%S")
  if [[ -z $v_file || -z $v_op ]]; then
    error "First two arguments are mandatory!"
    return 1
  fi
  if [[ $v_op == "bkp" ]]; then
     cp $v_file $v_bkp_file
  fi
  if [[ $v_op == "rep" ]]; then
      if [[ -z $value || -z $replace ]]; then
         error "Last two values required $3 and $4, value and its replacement!"
         return 1
      fi
      sed -i -e "s+$replace+$value+g" $v_file
      [[ $? -ne 0 ]] && error "Write operation failed!" && return 1
  fi
  if [[ $v_op == "add" ]]; then
      if [[ -z $value ]]; then
         error "Third argument $3 required!"
         return 1
      fi
      echo -e $value >> $v_file
      [[ $? -ne 0 ]] && error "Write operation failed!" && return 1
  fi
  if [[ $v_op == "rem" ]]; then
      if [[ -z $value ]]; then
         error "Third argument $3 required!"
         return 1
      fi
      sed -i "s+$value++g" $v_file
      [[ $? -ne 0 ]] && error "Write operation failed!" && return 1
  fi
  return 0
}

set_conf_param() {
local config="$1"
local param="$2"
local value="$3"
#local repval="$(grep -Ei "(^|#| )$param *=" $config)"
local repval="$(grep -Ei "(^|#) *$param *=" $config)"

if [[ ${#repval} -gt 0 ]]; then
  modifyFile $config rep "$param = $value\t\t# Modified by PgOperate" "${repval//[$'\n']}"
else
  modifyFile $config add "$param = $value\t\t# Added by PgOperate"
fi

if [[ $SET_CONF_PARAM_IN_CLUSTER == "YES" ]]; then
  if [[ $config =~ postgresql.conf ]]; then
    value="${value//\\&/&}"
    $TVD_PGHOME/bin/psql -U $PG_SUPERUSER -d postgres -c "alter system set ${param}=${value}" -t > /dev/null 2>&1
    $TVD_PGHOME/bin/psql -U $PG_SUPERUSER -d postgres -c "select pg_reload_conf()" -t > /dev/null 2>&1
  fi
fi

}


create_dirs() {
mkdir -p $PGSQL_BASE
chown $OS_USER:$OS_GROUP $PGSQL_BASE
mkdir -p $PGSQL_BASE/data
chown $OS_USER:$OS_GROUP $PGSQL_BASE/data
chmod 700 $PGSQL_BASE/data
mkdir -p $PGSQL_BASE/arch
chown $OS_USER:$OS_GROUP $PGSQL_BASE/arch
chmod 700 $PGSQL_BASE/arch
mkdir -p $PGSQL_BASE/scripts
chown $OS_USER:$OS_GROUP $PGSQL_BASE/scripts
chmod 700 $PGSQL_BASE/scripts
mkdir -p $PGSQL_BASE/log
chown $OS_USER:$OS_GROUP $PGSQL_BASE/log
chmod 700 $PGSQL_BASE/log
mkdir -p $PGSQL_BASE/etc
chown $OS_USER:$OS_GROUP $PGSQL_BASE/etc
chmod 700 $PGSQL_BASE/etc
mkdir -p $PGSQL_BASE/cert
chown $OS_USER:$OS_GROUP $PGSQL_BASE/cert
chmod 700 $PGSQL_BASE/cert
}



copy_certs() {
if [[ "$ENABLE_SSL" == "yes" ]]; then
 cp $CA_CERT "$PGSQL_BASE/cert/"
 cp $SERVER_CERT "$PGSQL_BASE/cert/"
 cp $SERVER_KEY "$PGSQL_BASE/cert/"
 chown $OS_USER:$OS_GROUP "$PGSQL_BASE/cert/$(basename $SERVER_CERT)"
 chown $OS_USER:$OS_GROUP "$PGSQL_BASE/cert/$(basename $SERVER_KEY)"
 chown $OS_USER:$OS_GROUP "$PGSQL_BASE/cert/$(basename $CA_CERT)"
 chmod og-rwx "$PGSQL_BASE/cert/$(basename $SERVER_CERT)"
 chmod og-rwx "$PGSQL_BASE/cert/$(basename $SERVER_KEY)"
 chmod og-rwx "$PGSQL_BASE/cert/$(basename $CA_CERT)"
fi
}



initialize_db() {
if [[ "$PG_ENABLE_CHECKSUM"="yes" ]]; then
   local PG_CHKSUM="--data-checksums"
else
   local PG_CHKSUM=""
fi

if [[ $SILENT -eq 1 ]]; then
  $PG_BIN_HOME/initdb -D $PGSQL_BASE/data --encoding=$PG_ENCODING $PG_CHKSUM --username=$PG_SUPERUSER >/dev/null 2>&1
else
  $PG_BIN_HOME/initdb -D $PGSQL_BASE/data --encoding=$PG_ENCODING $PG_CHKSUM --username=$PG_SUPERUSER
fi

}



move_configs() {
mv $PGSQL_BASE/data/postgresql.conf $PGSQL_BASE/etc
mv $PGSQL_BASE/data/pg_hba.conf $PGSQL_BASE/etc
mv $PGSQL_BASE/data/pg_ident.conf $PGSQL_BASE/etc
}





update_db_params() {
modifyFile "$PGSQL_BASE/etc/postgresql.conf" bkp
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" cluster_name "$PG_CLUSTER_ALIAS"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" port "$PG_PORT"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" hba_file "'$PGSQL_BASE/etc/pg_hba.conf'"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" ident_file "'$PGSQL_BASE/etc/pg_ident.conf'"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" listen_addresses "'0.0.0.0'"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" unix_socket_directories "'/var/run/postgresql'"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" unix_socket_permissions "0770"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" search_path "'\"\$user\", public'"
# Replication related
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" wal_level "replica"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" max_wal_senders "10"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" max_replication_slots "10"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" track_commit_timestamp "on"

while read -r param; do
  [[ ${#param} -gt 0 ]] && set_conf_param "$PGSQL_BASE/etc/postgresql.conf" $(echo $param | cut -s -d"=" -f1) "$(echo $param | cut -s -d"=" -f2)"
done <<< "$PG_DEF_PARAMS"

if [[ $PCTMEM -gt 0 ]]; then
  local membytes=$(free -m | grep Mem | awk '{print $2}')
  ((membytes=membytes*PCTMEM/100))
  set_conf_param "$PGSQL_BASE/etc/postgresql.conf" shared_buffers "${membytes}MB"
fi

if [[ "$ENABLE_SSL" == "yes" ]]; then
 set_conf_param "$PGSQL_BASE/etc/postgresql.conf" ssl_cert_file "'$PGSQL_BASE/cert/$(basename $SERVER_CERT)'"
 set_conf_param "$PGSQL_BASE/etc/postgresql.conf" ssl_key_file "'$PGSQL_BASE/cert/$(basename $SERVER_KEY)'"
 set_conf_param "$PGSQL_BASE/etc/postgresql.conf" ssl_ca_file "'$PGSQL_BASE/cert/$(basename $CA_CERT)'"
 set_conf_param "$PGSQL_BASE/etc/postgresql.conf" ssl "on"
fi
}



update_pg_hba() {
sed -i "s|^local\s\+all\s\+all\s\+trust$|local   all             $PG_SUPERUSER                                trust|g" $PGSQL_BASE/etc/pg_hba.conf
sed -i "s|^host\s\+all\s\+all\s\+127.0.0.1/32\s\+trust$|#host    all             $PG_SUPERUSER             127.0.0.1/32       trust|g" $PGSQL_BASE/etc/pg_hba.conf
sed -i "s|^host\s\+all\s\+all\s\+::1/128\s\+trust$|#host    all             $PG_SUPERUSER             ::1/128            trust|g" $PGSQL_BASE/etc/pg_hba.conf
sed -i "s|^local\s\+replication\s.\+$|local   replication     all                                     trust|g" $PGSQL_BASE/etc/pg_hba.conf
sed -i "s|^host\s\+replication\s.\+127.0.0.1/32\s.\+$|host    replication     all             127.0.0.1/32            trust|g" $PGSQL_BASE/etc/pg_hba.conf
sed -i "s|^host\s\+replication\s.\+::1/128\s.\+$|host    replication     all             ::1/128            scram-sha-256|g" $PGSQL_BASE/etc/pg_hba.conf
echo -e "# For replication. Connect from remote hosts. #replication#\nhost    replication     replica      0.0.0.0/0      scram-sha-256" >> $PGSQL_BASE/etc/pg_hba.conf
grep -q "#install.sh ssl#" $PGSQL_BASE/etc/pg_hba.conf
[[ $? -gt 0 ]] && echo -e "# For SSL connections #install.sh ssl#\nhostssl     all     all     0.0.0.0/0     cert" >> $PGSQL_BASE/etc/pg_hba.conf
grep -q "#install.sh non-ssl#" $PGSQL_BASE/etc/pg_hba.conf
[[ $? -gt 0 ]] && echo -e "# For non-SSL connections #install.sh non-ssl#\nhost        all     all        0.0.0.0/0    scram-sha-256" >> $PGSQL_BASE/etc/pg_hba.conf
}



check_server() {
if [[ -f $PGSQL_BASE/data/postmaster.pid ]]; then
kill -0 $(head -1 $PGSQL_BASE/data/postmaster.pid)
[[ $? -gt 0 ]] && return 1 || return 0
else
 return 1
fi
}


generate_manual_start_script() {
echo "#!/usr/bin/env bash

$TVD_PGHOME/bin/pg_ctl start -D $PGSQL_BASE/data -l $PGSQL_BASE/log/server.log -s -o \"-p ${PG_PORT} --config_file=$PGSQL_BASE/etc/postgresql.conf\" -w -t 300
" > $PGSQL_BASE/scripts/start.sh

chmod +x $PGSQL_BASE/scripts/start.sh
}




create_service_file() {
if [[ $_IS_ROOT -ne 0 ]]; then 
   echo "WARNING: Must be root to create service file for systemd."
   return 1
fi

local service_file=$1
echo "
[Unit]
Description=PostgreSQL database server
After=network.target

[Service]
Type=forking

User=postgres
Group=postgres

# Port number for server to listen on
Environment=PGPORT=$PG_PORT

# Location of database directory
Environment=PGDATA=$PGSQL_BASE/data

# Where to send early-startup messages from the server (before the logging
# options of postgresql.conf take effect)
# This is normally controlled by the global default set by systemd
StandardOutput=syslog

# Disable OOM kill on the postmaster
OOMScoreAdjust=-1000
ExecStart=$PG_BIN_HOME/pg_ctl start -D \${PGDATA} -l $PGSQL_BASE/log/server.log -s -o \"-p \${PGPORT} --config_file=$PGSQL_BASE/etc/postgresql.conf\" -w -t 300
ExecStop=$PG_BIN_HOME/pg_ctl stop -D \${PGDATA} -s -m fast
ExecReload=$PG_BIN_HOME/pg_ctl reload -D \${PGDATA} -s

# Give a reasonable amount of time for the server to start up/shut down
TimeoutSec=300

[Install]
WantedBy=multi-user.target
" > /etc/systemd/system/$service_file

systemctl daemon-reload
systemctl enable $service_file

}



start_pg_service() {
local service_file=$1
sudo systemctl stop $service_file
sudo systemctl start $service_file
sleep 1
check_server
if [[ $? -gt 0 ]]; then
 sudo systemctl stop $service_file
 sudo systemctl start $service_file
fi
sleep 3
check_server
if [[ $? -gt 0 ]]; then
  error "Failed to start postgreSQL service!"
else
  sudo systemctl status $service_file --plain --no-pager
fi
}



modify_password_file() {
  local port=$1
  local user=$2
  local pwd=$3
  local cmd
  [[ $_IS_ROOT -eq 0 ]] && cmd="su postgres -c" || cmd="eval"
  $cmd "touch ~/.pgpass"
  $cmd "sed -i "/\*:$port:\*:$user:.*/d" ~/.pgpass"
  $cmd "echo \"*:$port:*:$user:$pwd\" >> ~/.pgpass"
  chmod 0600 ~/.pgpass
}



list_backup_dir() {
echo -e "\nBackup location: $BACKUP_LOCATION"
if [[ ! -d $BACKUP_LOCATION ]]; then
  echo
  echo "Backup directory not created yet. It will be created with first backup command."
  echo
  return 0
fi
local backups=$(ls $BACKUP_LOCATION/ | grep -E "^[0-9]+-[0-9]+$")
local d md cnt mdir mid midir
cnt=0
md=0
mid=$(date +"%s")
if [[ ! -z $backups ]]; then
 for bdir in $(ls -1 $BACKUP_LOCATION/ | grep -E "^[0-9]+-[0-9]+$" | sort -h); do
   d="$(grep full_backup_time $BACKUP_LOCATION/$bdir/meta.info | cut -s -d"=" -f2)"
   d=$(eval "echo $d")
   d=$(date --date="${d}" +%s)
   [[ $d -gt $md ]] && md=$d && mdir=$bdir
   [[ $d -lt $mid ]] && mid=$d && midir=$bdir
 done
 local note nwals bsize wsize

 printf "┌" && printf "─%.0s" {1..8} && printf "┬" && printf "─%.0s" {1..21} && printf "┬" && printf "─%.0s" {1..11} && printf "┬" && printf "─%.0s" {1..16} && printf "┬" && printf "─%.0s" {1..16} && printf "%s\n" "┐"
 printf "│ \033[1m%7s\033[0m│ \033[1m%20s\033[0m│ \033[1m%10s\033[0m│ \033[1m%15s\033[0m│ \033[1m%15s\033[0m│\n" "Sub Dir" "Backup created" "WALs count" "Backup size(MB)" "WALs size(MB)"
 printf "├" && printf "─%.0s" {1..8} && printf "┼" && printf "─%.0s" {1..21} && printf "┼" && printf "─%.0s" {1..11} && printf "┼" && printf "─%.0s" {1..16} && printf "┼" && printf "─%.0s" {1..16} && printf "%s\n" "┤"

 for bdir in $(ls -1 $BACKUP_LOCATION/ | grep -E "^[0-9]+-[0-9]+$" | sort -h); do
   (( cnt++ ))
   d="$(grep full_backup_time $BACKUP_LOCATION/$bdir/meta.info | cut -s -d"=" -f2)"
   d=$(eval "echo $d")
   nwals=$(ls -1 $BACKUP_LOCATION/$bdir/wal | grep -v "\." | wc -l)
   bsize=$(du -sm $BACKUP_LOCATION/$bdir/data | awk '{print $1}' | xargs)
   wsize=$(du -sm $BACKUP_LOCATION/$bdir/wal  | awk '{print $1}' | xargs)
   if [[ "$midir" == "$mdir" ]]; then
     note=" <--- Current backup dir"
   elif [[ "$bdir" == "$midir" ]]; then
     note=" <--- Oldest backup dir"
   elif [[ "$bdir" == "$mdir" ]]; then
     note=" <--- Current backup dir"
   else
     note=""
   fi
   printf "│ %7s│ %20s│ %10s│ %15s│ %15s│%-25s\n" "${bdir//-*}"   "$d"   "$nwals"  "$bsize"  "$wsize"  "$note"
 done
 printf "└" && printf "─%.0s" {1..8} && printf "┴" && printf "─%.0s" {1..21} && printf "┴" && printf "─%.0s" {1..11} && printf "┴" && printf "─%.0s" {1..16} && printf "┴" && printf "─%.0s" {1..16} && printf "%s\n" "┘"
 echo -e "Number backups: $cnt \n"

fi

}
