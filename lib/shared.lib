SET_CONF_PARAM_IN_CLUSTER=YES
_IS_ROOT="$(id -u)"


prepare_logdir() {
  mkdir -p $PGSQL_BASE/log/tools
  local rdays
  [[ -z $TOOLS_LOG_RETENTION_DAYS ]] && rdays=30 || rdays=$TOOLS_LOG_RETENTION_DAYS
  find $PGSQL_BASE/log/tools -mtime +$rdays -exec rm -f {} \;
}

stop_cluster() {
  local RC
  if [[ -z $PG_STOP_SCRIPT ]]; then 
    sudo systemctl stop postgresql-${PGBASENV_ALIAS} 
    RC=$?
  else 
    $PG_STOP_SCRIPT
    RC=$?
  fi
  if [[ $RC -gt 0 ]]; then
     echo "ERROR: Failed to stop the cluster. Note, that you can use custom stop script defined by PG_STOP_SCRIPT parameter in parameters file."
     exit $RC
  fi
}

start_cluster() {
  local message="$1"
  local RC
  if [[ -z $PG_START_SCRIPT ]]; then 
    sudo systemctl start postgresql-${PGBASENV_ALIAS} 
    RC=$?
  else 
    $PG_START_SCRIPT
    RC=$?
  fi
  if [[ $RC -gt 0 ]]; then
     echo "ERROR: Failed to start the cluster. Check the logs in $PGSQL_BASE/log for details."
     echo "ERROR: Note, that you can use custom start script defined by PG_START_SCRIPT parameter in parameters file."
     [[ ! -z $message ]] && echo "$message"
     exit $RC
  fi
}


modifyFile() {
  local v_file=$1
  local v_op=$2
  local value="$3"
  local replace="$4"
  replace="${replace//\"/\\x22}"
  replace="${replace//$'\t'/\\t}"
  replace="${replace//\*/\\*}"
  value="${value//\"/\\x22}"
  value="${value//$'\t'/\\t}"
  local v_bkp_file=$v_file"."$(date +"%y%m%d%H%M%S")
  if [[ -z $v_file || -z $v_op ]]; then
    error "First two arguments are mandatory!"
    return 1
  fi
  if [[ $v_op == "bkp" ]]; then
     cp $v_file $v_bkp_file
  fi
  if [[ $v_op == "rep" ]]; then
      if [[ -z $value || -z $replace ]]; then
         error "Last two values required $3 and $4, value and its replacement!"
         return 1
      fi
      sed -i -e "s+$replace+$value+g" $v_file
      [[ $? -ne 0 ]] && error "Write operation failed!" && return 1
  fi
  if [[ $v_op == "add" ]]; then
      if [[ -z $value ]]; then
         error "Third argument $3 required!"
         return 1
      fi
      echo -e $value >> $v_file
      [[ $? -ne 0 ]] && error "Write operation failed!" && return 1
  fi
  if [[ $v_op == "rem" ]]; then
      if [[ -z $value ]]; then
         error "Third argument $3 required!"
         return 1
      fi
      sed -i "s+$value++g" $v_file
      [[ $? -ne 0 ]] && error "Write operation failed!" && return 1
  fi
  return 0
}

set_conf_param() {
local config="$1"
local param="$2"
local value="$3"
local repval="$(grep -Ei "(^|#| )$param *=" $config)"

if [[ ${#repval} -gt 0 ]]; then
  modifyFile $config rep "$param = $value\t\t# Modified by PgOperate" "${repval//[$'\n']}"
else
  modifyFile $config add "$param = $value\t\t# Added by PgOperate"
fi

if [[ $SET_CONF_PARAM_IN_CLUSTER == "YES" ]]; then
  if [[ $config =~ postgresql.conf ]]; then
    value="${value//\\&/&}"
    $TVD_PGHOME/bin/psql -U $PG_SUPERUSER -d postgres -c "alter system set ${param}=${value}" -t > /dev/null 2>&1
    $TVD_PGHOME/bin/psql -U $PG_SUPERUSER -d postgres -c "select pg_reload_conf()" -t > /dev/null 2>&1
  fi
fi

}


create_dirs() {
mkdir -p $PGSQL_BASE
chown postgres:postgres $PGSQL_BASE
mkdir -p $PGSQL_BASE/data
chown postgres:postgres $PGSQL_BASE/data
chmod 700 $PGSQL_BASE/data
mkdir -p $PGSQL_BASE/arch
chown postgres:postgres $PGSQL_BASE/arch
chmod 700 $PGSQL_BASE/arch
mkdir -p $PGSQL_BASE/scripts
chown postgres:postgres $PGSQL_BASE/scripts
chmod 700 $PGSQL_BASE/scripts
mkdir -p $PGSQL_BASE/log
chown postgres:postgres $PGSQL_BASE/log
chmod 700 $PGSQL_BASE/log
mkdir -p $PGSQL_BASE/etc
chown postgres:postgres $PGSQL_BASE/etc
chmod 700 $PGSQL_BASE/etc
mkdir -p $PGSQL_BASE/cert
chown postgres:postgres $PGSQL_BASE/cert
chmod 700 $PGSQL_BASE/cert
}



copy_certs() {
if [[ "$ENABLE_SSL" == "yes" ]]; then
 cp $CA_CERT "$PGSQL_BASE/cert/"
 cp $SERVER_CERT "$PGSQL_BASE/cert/"
 cp $SERVER_KEY "$PGSQL_BASE/cert/"
 chown postgres:postgres "$PGSQL_BASE/cert/$(basename $SERVER_CERT)"
 chown postgres:postgres "$PGSQL_BASE/cert/$(basename $SERVER_KEY)"
 chown postgres:postgres "$PGSQL_BASE/cert/$(basename $CA_CERT)"
 chmod og-rwx "$PGSQL_BASE/cert/$(basename $SERVER_CERT)"
 chmod og-rwx "$PGSQL_BASE/cert/$(basename $SERVER_KEY)"
 chmod og-rwx "$PGSQL_BASE/cert/$(basename $CA_CERT)"
fi
}



initialize_db() {
if [[ "$PG_ENABLE_CHECKSUM"="yes" ]]; then
   local PG_CHKSUM="--data-checksums"
else
   local PG_CHKSUM=""
fi

if [[ $_IS_ROOT -eq 0 ]]; then
  su postgres -c "$PG_BIN_HOME/initdb -D $PGSQL_BASE/data --encoding=$PG_ENCODING $PG_CHKSUM --username=$PG_SUPERUSER"
else
  $PG_BIN_HOME/initdb -D $PGSQL_BASE/data --encoding=$PG_ENCODING $PG_CHKSUM --username=$PG_SUPERUSER
fi

}



move_configs() {
mv $PGSQL_BASE/data/postgresql.conf $PGSQL_BASE/etc
mv $PGSQL_BASE/data/pg_hba.conf $PGSQL_BASE/etc
mv $PGSQL_BASE/data/pg_ident.conf $PGSQL_BASE/etc
}





update_db_params() {
modifyFile "$PGSQL_BASE/etc/postgresql.conf" bkp
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" cluster_name "$PG_CLUSTER_ALIAS"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" port "$PG_PORT"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" hba_file "'$PGSQL_BASE/etc/pg_hba.conf'"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" ident_file "'$PGSQL_BASE/etc/pg_ident.conf'"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" listen_addresses "'0.0.0.0'"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" unix_socket_directories "'/var/run/postgresql'"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" unix_socket_permissions "0770"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" search_path "'\"\$user\", public'"
# Replication related
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" wal_level "replica"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" max_wal_senders "10"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" max_wal_size "1GB"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" max_replication_slots "10"
set_conf_param "$PGSQL_BASE/etc/postgresql.conf" track_commit_timestamp "on"

while read -r param; do
  [[ ${#param} -gt 0 ]] && set_conf_param "$PGSQL_BASE/etc/postgresql.conf" $(echo $param | cut -s -d"=" -f1) "$(echo $param | cut -s -d"=" -f2)"
done <<< "$PG_DEF_PARAMS"

if [[ $PCTMEM -gt 0 ]]; then
  local membytes=$(free -m | grep Mem | awk '{print $2}')
  ((membytes=membytes*PCTMEM/100))
  set_conf_param "$PGSQL_BASE/etc/postgresql.conf" shared_buffers "${membytes}MB"
fi

if [[ "$ENABLE_SSL" == "yes" ]]; then
 set_conf_param "$PGSQL_BASE/etc/postgresql.conf" ssl_cert_file "'$PGSQL_BASE/cert/$(basename $SERVER_CERT)'"
 set_conf_param "$PGSQL_BASE/etc/postgresql.conf" ssl_key_file "'$PGSQL_BASE/cert/$(basename $SERVER_KEY)'"
 set_conf_param "$PGSQL_BASE/etc/postgresql.conf" ssl_ca_file "'$PGSQL_BASE/cert/$(basename $CA_CERT)'"
 set_conf_param "$PGSQL_BASE/etc/postgresql.conf" ssl "on"
fi
}



update_pg_hba() {
sed -i "s|^local\s\+all\s\+all\s\+trust$|local   all             $PG_SUPERUSER                                trust|g" $PGSQL_BASE/etc/pg_hba.conf
sed -i "s|^host\s\+all\s\+all\s\+127.0.0.1/32\s\+trust$|#host    all             $PG_SUPERUSER             127.0.0.1/32       trust|g" $PGSQL_BASE/etc/pg_hba.conf
sed -i "s|^host\s\+all\s\+all\s\+::1/128\s\+trust$|#host    all             $PG_SUPERUSER             ::1/128            trust|g" $PGSQL_BASE/etc/pg_hba.conf
sed -i "s|^local\s\+replication\s.\+$|local   replication     all                                     trust|g" $PGSQL_BASE/etc/pg_hba.conf
sed -i "s|^host\s\+replication\s.\+127.0.0.1/32\s.\+$|host    replication     all             127.0.0.1/32            trust|g" $PGSQL_BASE/etc/pg_hba.conf
sed -i "s|^host\s\+replication\s.\+::1/128\s.\+$|host    replication     all             ::1/128            scram-sha-256|g" $PGSQL_BASE/etc/pg_hba.conf
echo -e "# For replication. Connect from remote hosts. #replication#\nhost    replication     replica      0.0.0.0/0      scram-sha-256" >> $PGSQL_BASE/etc/pg_hba.conf
grep -q "#install.sh ssl#" $PGSQL_BASE/etc/pg_hba.conf
[[ $? -gt 0 ]] && echo -e "# For SSL connections #install.sh ssl#\nhostssl     all     all     0.0.0.0/0     cert" >> $PGSQL_BASE/etc/pg_hba.conf
grep -q "#install.sh non-ssl#" $PGSQL_BASE/etc/pg_hba.conf
[[ $? -gt 0 ]] && echo -e "# For non-SSL connections #install.sh non-ssl#\nhost        all     all        0.0.0.0/0    scram-sha-256" >> $PGSQL_BASE/etc/pg_hba.conf
}



check_server() {
if [[ -f $PGSQL_BASE/data/postmaster.pid ]]; then
kill -0 $(head -1 $PGSQL_BASE/data/postmaster.pid)
[[ $? -gt 0 ]] && return 1 || return 0
else
 return 1
fi
}

manual_start_stop() {
if [[ $_IS_ROOT -eq 0 ]]; then  
  su postgres -c "$PG_BIN_HOME/pg_ctl start -D $PGSQL_BASE/data -l $PGSQL_BASE/log/server.log -o \"--config_file=$PGSQL_BASE/etc/postgresql.conf\""
else
  $PG_BIN_HOME/pg_ctl start -D $PGSQL_BASE/data -l $PGSQL_BASE/log/server.log -o "--config_file=$PGSQL_BASE/etc/postgresql.conf"
fi
check_server
[[ $? -gt 0 ]] && local res=1 || local res=0
if [[ $_IS_ROOT -eq 0 ]]; then  
  su postgres -c "$PG_BIN_HOME/pg_ctl stop -D $PGSQL_BASE/data -s --mode=smart"
else
  $PG_BIN_HOME/pg_ctl stop -D $PGSQL_BASE/data -s --mode=smart
fi
return $res
}



generate_manual_start_script() {
echo "#!/usr/bin/env bash

$TVD_PGHOME/bin/pg_ctl start -D $PGSQL_BASE/data -l $PGSQL_BASE/log/server.log -s -o \"-p ${PG_PORT} --config_file=$PGSQL_BASE/etc/postgresql.conf\" -w -t 300
" > $PGSQL_BASE/scripts/start.sh

chmod +x $PGSQL_BASE/scripts/start.sh
}





create_service_file() {
if [[ $_IS_ROOT -ne 0 ]]; then 
   echo "WARNING: Must be root to create service file for systemd."
   return 1
fi

local service_file=$1
echo "
[Unit]
Description=PostgreSQL database server
After=network.target

[Service]
Type=forking

User=postgres
Group=postgres

# Port number for server to listen on
Environment=PGPORT=$PG_PORT

# Location of database directory
Environment=PGDATA=$PGSQL_BASE/data

# Where to send early-startup messages from the server (before the logging
# options of postgresql.conf take effect)
# This is normally controlled by the global default set by systemd
StandardOutput=syslog

# Disable OOM kill on the postmaster
OOMScoreAdjust=-1000
ExecStart=$PG_BIN_HOME/pg_ctl start -D \${PGDATA} -l $PGSQL_BASE/log/server.log -s -o \"-p \${PGPORT} --config_file=$PGSQL_BASE/etc/postgresql.conf\" -w -t 300
ExecStop=$PG_BIN_HOME/pg_ctl stop -D \${PGDATA} -s -m fast
ExecReload=$PG_BIN_HOME/pg_ctl reload -D \${PGDATA} -s

# Give a reasonable amount of time for the server to start up/shut down
TimeoutSec=300

[Install]
WantedBy=multi-user.target
" > /etc/systemd/system/$service_file

systemctl daemon-reload
systemctl enable $service_file

}


add_sudoers_rules() {
echo "
$PG_SUPERUSER ALL= NOPASSWD: /bin/systemctl start postgresql*
$PG_SUPERUSER ALL= NOPASSWD: /bin/systemctl stop postgresql*
$PG_SUPERUSER ALL= NOPASSWD: /bin/systemctl status postgresql*
" > /etc/sudoers.d/01_${PG_SUPERUSER}

echo "Now user $PG_SUPERUSER can use sudo to start/stop postgresql using systemctl."
}



start_pg_service() {
local service_file=$1
sudo systemctl stop $service_file
sudo systemctl start $service_file
sleep 1
check_server
if [[ $? -gt 0 ]]; then
 sudo systemctl stop $service_file
 sudo systemctl start $service_file
fi
sleep 3
check_server
if [[ $? -gt 0 ]]; then
  error "Failed to start postgreSQL service!"
else
  sudo systemctl status $service_file --plain --no-pager
fi
}



modify_password_file() {
  local port=$1
  local user=$2
  local pwd=$3
  local cmd
  [[ $_IS_ROOT -eq 0 ]] && cmd="su postgres -c" || cmd="eval"
  $cmd "touch ~/.pgpass"
  $cmd "sed -i "/\*:$port:\*:$user:.*/d" ~/.pgpass"
  $cmd "echo \"*:$port:*:$user:$pwd\" >> ~/.pgpass"
  chmod 0600 ~/.pgpass
}


in_cluster_actions() {
  
  # Change directory required when executed as root.  
  cd /tmp

  if [[ ! -z "$PG_SUPERUSER_PWD" ]]; then
    su postgres -c "$PG_BIN_HOME/psql -p $PG_PORT -U $PG_SUPERUSER -d postgres -c \"alter user $PG_SUPERUSER password '$PG_SUPERUSER_PWD';\" -t"
  fi

  if [[ ! -z $REPLICA_USER_PASSWORD ]]; then
    echo "Cluster will be prepared for replication."
    if [[ -z $REPLICATION_SLOT_NAME ]]; then
       echo "WARNING: REPLICATION_SLOT_NAME parameter was not specified in parameters.conf. Default name $DEFAULT_REPLICATION_SLOT_NAME will be used."
       REPLICATION_SLOT_NAME=$DEFAULT_REPLICATION_SLOT_NAME
    fi

    for rslot in $(echo $REPLICATION_SLOT_NAME | sed "s/,/ /g")
    do
      su postgres -c "$PG_BIN_HOME/psql -p $PG_PORT -U $PG_SUPERUSER -d postgres -c \"SELECT * FROM pg_create_physical_replication_slot('$rslot');\" -t"
    done

    su postgres -c "$PG_BIN_HOME/psql -p $PG_PORT -U $PG_SUPERUSER -d postgres -c \"CREATE USER replica WITH REPLICATION PASSWORD '$REPLICA_USER_PASSWORD';\" -t"
  fi

  if [[ ! -z $PG_DATABASE ]]; then
    echo "Creating default database, role and schema $PG_DATABASE."
    su postgres -c "$PG_BIN_HOME/psql -p $PG_PORT -U $PG_SUPERUSER -d postgres -c \"CREATE DATABASE $PG_DATABASE ENCODING=$PG_ENCODING;\" -t"
    su postgres -c "$PG_BIN_HOME/psql -p $PG_PORT -U $PG_SUPERUSER -d $PG_DATABASE -c \"CREATE SCHEMA $PG_DATABASE;\" -t"

    su postgres -c "$PG_BIN_HOME/psql -p $PG_PORT -U $PG_SUPERUSER -d postgres -c \"CREATE ROLE $PG_DATABASE;\""
    su postgres -c "$PG_BIN_HOME/psql -p $PG_PORT -U $PG_SUPERUSER -d $PG_DATABASE -c \"ALTER SCHEMA $PG_DATABASE OWNER TO $PG_DATABASE;\""
  fi
}

